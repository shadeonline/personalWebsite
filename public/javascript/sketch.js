// CREATED BY HUNG EU GENG @ 2021

var _0x571c = ["\x73\x74\x61\x72\x74\x47\x61\x6D\x65", "\x67\x61\x6D\x65\x4F\x6E", "\x6C\x69\x76\x65\x73", "\x67\x61\x6D\x65\x4F\x76\x65\x72", "\x6C\x65\x76\x65\x6C\x43\x6F\x6D\x70\x6C\x65\x74\x65", "\x6C\x65\x6E\x67\x74\x68", "\x73\x74\x61\x72\x74\x45\x6D\x69\x74\x74\x65\x72", "\x73\x68\x6F\x77", "\x78", "\x6F\x72\x69\x67\x69\x6E\x61\x6C", "\x79", "\x69\x73\x44\x65\x61\x64", "\x73\x70\x61\x6E", "\x66\x6C\x61\x67\x59", "\x68\x65\x69\x67\x68\x74", "\x62\x61\x73\x65", "\x69\x73\x46\x6F\x75\x6E\x64", "\x76\x61\x6C\x75\x65", "\x70\x75\x73\x68", "\x70\x6C\x75\x6D\x6D\x65\x74\x69\x6E\x67", "\x70\x6C\x75\x6D\x65\x74", "\x6A", "\x74\x6F\x4D\x6F\x75\x73\x65", "\x68\x65\x61\x6C\x74\x68", "\x6F\x6E\x53\x63\x72\x65\x65\x6E", "\x6D\x6F\x76\x65", "\x57\x65\x6C\x63\x6F\x6D\x65\x20\x74\x6F\x20\x47\x61\x6D\x65\x20\x50\x72\x6F\x6A\x65\x63\x74\x21", "\x57\x41\x53\x44\x20\x74\x6F\x20\x6D\x6F\x76\x65\x20\x61\x6E\x64\x20\x4C\x65\x66\x74\x20\x43\x6C\x69\x63\x6B\x20\x74\x6F\x20\x73\x68\x6F\x6F\x74", "\x50\x72\x65\x73\x73\x20\x53\x70\x61\x63\x65\x20\x74\x6F\x20\x53\x74\x61\x72\x74", "\x47\x61\x6D\x65\x20\x4F\x76\x65\x72", "\x50\x72\x65\x73\x73\x20\x53\x70\x61\x63\x65\x20\x74\x6F\x20\x72\x65\x73\x74\x61\x72\x74", "\x4C\x65\x76\x65\x6C\x20\x43\x6F\x6D\x70\x6C\x65\x74\x65\x21", "\x6D\x6F\x76\x65\x53\x70\x65\x65\x64", "\x6A\x75\x6D\x70\x53\x70\x65\x65\x64", "\x69\x73\x4C\x65\x66\x74", "\x69\x73\x52\x69\x67\x68\x74", "\x69\x73\x46\x61\x6C\x6C\x69\x6E\x67", "\x6D\x6F\x76\x69\x6E\x67\x52\x69\x67\x68\x74", "\x6D\x6F\x76\x65\x52\x69\x67\x68\x74\x4F\x6E\x65", "\x6D\x6F\x76\x65\x52\x69\x67\x68\x74\x54\x77\x6F", "\x6D\x6F\x76\x65\x52\x69\x67\x68\x74\x54\x68\x72\x65\x65", "\x6D\x6F\x76\x65\x52\x69\x67\x68\x74\x46\x6F\x75\x72", "\x6D\x6F\x76\x69\x6E\x67\x4C\x65\x66\x74", "\x6D\x6F\x76\x65\x4C\x65\x66\x74\x4F\x6E\x65", "\x6D\x6F\x76\x65\x4C\x65\x66\x74\x54\x77\x6F", "\x6D\x6F\x76\x65\x4C\x65\x66\x74\x54\x68\x72\x65\x65", "\x6D\x6F\x76\x65\x4C\x65\x66\x74\x46\x6F\x75\x72", "\x67\x75\x6E\x46\x69\x72\x65\x5F\x78", "\x67\x75\x6E\x46\x69\x72\x65\x5F\x79", "\x63\x6F\x6C\x6F\x75\x72", "\x64\x69\x73\x61\x70\x70\x65\x61\x72", "\x6D\x6F\x76\x65\x50\x6C\x61\x79\x65\x72", "\x6A\x75\x6D\x70\x52\x65\x73\x65\x74", "\x67\x72\x61\x76\x69\x74\x79", "\x72\x65\x73\x70\x61\x77\x6E", "\x67\x75\x6E\x41\x72\x6D", "\x61\x64\x64", "\x6D\x75\x6C\x74", "\x6E\x6F\x72\x6D\x61\x6C\x69\x7A\x65", "\x73\x75\x62", "\x73\x69\x7A\x65", "\x74", "\x73\x70\x65\x65\x64", "\x64\x69\x72", "\x72", "\x72\x61\x6E\x64\x6F\x6D\x53\x70\x69\x6E", "\x72\x61\x6E\x64\x6F\x6D", "\x73\x74\x61\x72\x74\x50\x6F\x73", "\x78\x53\x70\x65\x65\x64", "\x79\x53\x70\x65\x65\x64", "\x70\x61\x72\x74\x69\x63\x6C\x65\x73", "\x73\x74\x61\x72\x74\x50\x61\x72\x74\x69\x63\x6C\x65\x73", "\x6C\x69\x66\x65\x74\x69\x6D\x65", "\x72\x61\x6E\x67\x65", "\x67\x65\x74\x52\x61\x6E\x64\x6F\x6D\x44\x69\x72", "\x66\x61\x64\x65", "\x64\x72\x61\x77\x41\x6E\x64\x55\x70\x64\x61\x74\x65\x50\x61\x72\x74\x69\x63\x6C\x65\x73", "\x6D\x6F\x76\x65\x52\x61\x6E\x67\x65", "\x68\x65\x61\x6C\x74\x68\x42\x61\x72", "\x63\x72\x65\x61\x74\x65\x4E\x65\x77\x50\x61\x72\x74\x69\x63\x6C\x65\x73", "\x75\x70\x64\x61\x74\x65\x50\x61\x72\x74\x69\x63\x6C\x65", "\x61\x67\x65", "\x73\x70\x6C\x69\x63\x65"]; var floorPos_y; var groundPos_Y; var state; var shurikens = []; var mc; var trees = []; var clouds = []; var collectables = []; var canyons = []; var mountains = []; var ground; var stars = []; var scrollPos; var score; var scoreDisplay = []; var flags = []; var enemies = []; var platforms = []; function setup() { createCanvas(1024, 576); setupGameLvlOne() } function draw() { if (state == _0x571c[0]) { startScreen() } else { if (state == _0x571c[1] && mc[_0x571c[2]] > 0) { runGameLvlOne() } else { if (state == _0x571c[3]) { gameOverScreen() } else { if (state == _0x571c[4]) { levelCompleteScreen() } } } } } function setupGameLvlOne() { floorPos_y = 432; groundPos_Y = 432; score = new Score; scoreDisplay = []; scrollPos = 0; mc = new Mc; trees = [new Tree(300), new Tree(780), new Tree(990), new Tree(1385), new Tree(1550)]; mountains = [new Mountain(-150), new Mountain(2200)]; ground = new Ground(0, width); collectables = [new Collectible(500, groundPos_Y - 50, 1), new Collectible(800, groundPos_Y - 50, 1), new Collectible(900, groundPos_Y - 50, 1), new Collectible(1500, groundPos_Y - 50, 1), new Collectible(2200, groundPos_Y - 50, 1)]; canyons = [new Canyon(400, 70), new Canyon(700, 70), new Canyon(900, 70), new Canyon(1030, 70), new Canyon(1300, 70), new Canyon(1450, 70)]; flags = [new Flag(2550, 150)]; enemies = [new Enemy(1500), new Enemy(700), new Enemy(1000), new Enemy(2000)]; for (var _0xd232x16 = 0; _0xd232x16 < enemies[_0x571c[5]]; _0xd232x16++) { enemies[_0xd232x16][_0x571c[6]](250, 100) }; platforms = [new Platform(2200, 40, 100), new Platform(2300, 70, 100), new Platform(2400, 100, 100), new Platform(2500, 150, 100)]; frameRate(30); state = _0x571c[0] } function runGameLvlOne() { background(20, 54, 66); showStars(); ground[_0x571c[7]](); push(); translate(scrollPos, 0); showMountains(); showTrees(); showClouds(); canyonsInit(); flagInit(); collectablesInit(); platformInit(); enemiesInit(); pop(); shurikensInit(); scoreAndHpInit(); mcInit() } function enemiesInit() { for (var _0xd232x16 = 0; _0xd232x16 < enemies[_0x571c[5]]; _0xd232x16++) { enemies[_0xd232x16][_0x571c[7]](); enemies[_0xd232x16][_0x571c[8]] = enemies[_0xd232x16][_0x571c[9]] + scrollPos; let _0xd232x19 = (mc[_0x571c[8]] > (enemies[_0xd232x16][_0x571c[8]] + scrollPos - 30) && mc[_0x571c[8]] < (enemies[_0xd232x16][_0x571c[8]] + scrollPos)) && (mc[_0x571c[10]] > (enemies[_0xd232x16][_0x571c[10]] - 30) && (mc[_0x571c[10]] < enemies[_0xd232x16][_0x571c[10]] + 60)); let _0xd232x1a = (mc[_0x571c[8]] < (enemies[_0xd232x16][_0x571c[8]] + scrollPos + 30) && mc[_0x571c[8]] > (enemies[_0xd232x16][_0x571c[8]] + scrollPos)) && (mc[_0x571c[10]] > (enemies[_0xd232x16][_0x571c[10]] - 30) && (mc[_0x571c[10]] < enemies[_0xd232x16][_0x571c[10]] + 60)); if (_0xd232x19 && !enemies[_0xd232x16][_0x571c[11]]) { mc[_0x571c[8]] -= 75; mc[_0x571c[10]] -= 50; mc[_0x571c[2]] -= 1 } else { if (_0xd232x1a && !enemies[_0xd232x16][_0x571c[11]]) { mc[_0x571c[8]] += 75; mc[_0x571c[10]] -= 50; mc[_0x571c[2]] -= 1 } } } } function platformInit() { var _0xd232x1c = false; for (var _0xd232x16 = 0; _0xd232x16 < platforms[_0x571c[5]]; ++_0xd232x16) { platforms[_0xd232x16][_0x571c[7]](); platforms[_0xd232x16][_0x571c[8]] = platforms[_0xd232x16][_0x571c[9]] + scrollPos; let _0xd232x1d = (mc[_0x571c[8]] > (platforms[_0xd232x16][_0x571c[8]] + scrollPos) && mc[_0x571c[8]] < (platforms[_0xd232x16][_0x571c[8]] + scrollPos + platforms[_0xd232x16][_0x571c[12]])) && (mc[_0x571c[10]] <= platforms[_0xd232x16][_0x571c[10]] + 15); _0xd232x1c = _0xd232x1d || _0xd232x1c; if (_0xd232x1d) { floorPos_y = platforms[_0xd232x16][_0x571c[10]] } else { if (!_0xd232x1c) { floorPos_y = 432 } } } } function flagInit() { for (var _0xd232x16 = 0; _0xd232x16 < flags[_0x571c[5]]; ++_0xd232x16) { flags[_0xd232x16][_0x571c[8]] = flags[_0xd232x16][_0x571c[9]] + scrollPos; flags[_0xd232x16][_0x571c[7]](); if (flags[_0xd232x16][_0x571c[13]] == (flags[_0xd232x16][_0x571c[14]])) { state = _0x571c[4] }; var _0xd232x1f = ((mc[_0x571c[8]] > flags[_0xd232x16][_0x571c[8]] - 50 + scrollPos) && (mc[_0x571c[8]] < flags[_0xd232x16][_0x571c[8]] + 50 + scrollPos) && (mc[_0x571c[10]] <= flags[_0xd232x16][_0x571c[15]])); if (_0xd232x1f) { flags[_0xd232x16][_0x571c[16]] = true } } } function collectablesInit() { for (var _0xd232x16 = 0; _0xd232x16 < collectables[_0x571c[5]]; ++_0xd232x16) { collectables[_0xd232x16][_0x571c[8]] = collectables[_0xd232x16][_0x571c[9]] + scrollPos; collectables[_0xd232x16][_0x571c[7]](); var _0xd232x21 = dist(collectables[_0xd232x16][_0x571c[8]] + scrollPos, collectables[_0xd232x16][_0x571c[10]], mc[_0x571c[8]], mc[_0x571c[10]]) <= 60; if (_0xd232x21 && collectables[_0xd232x16][_0x571c[16]] == false) { score[_0x571c[17]] += 1; scoreDisplay[_0x571c[18]](new Collectible(30 + _0xd232x16 * 80, 50, 0.5)); collectables[_0xd232x16][_0x571c[16]] = true } } } function canyonsInit() { for (var _0xd232x16 = 0; _0xd232x16 < canyons[_0x571c[5]]; ++_0xd232x16) { canyons[_0xd232x16][_0x571c[7]](); canyons[_0xd232x16][_0x571c[8]] = canyons[_0xd232x16][_0x571c[9]] + scrollPos; let _0xd232x23 = (mc[_0x571c[8]] > (canyons[_0xd232x16][_0x571c[8]] + scrollPos + 2) && mc[_0x571c[8]] < (canyons[_0xd232x16][_0x571c[8]] + scrollPos + canyons[_0xd232x16][_0x571c[12]] - 2)) && (mc[_0x571c[10]] >= canyons[_0xd232x16][_0x571c[10]]); if (_0xd232x23) { mc[_0x571c[19]] = true; mc[_0x571c[20]](); mc[_0x571c[21]] = 0 } } } function mcInit() { mc[_0x571c[7]](); if (mc[_0x571c[2]] == 0) { state = _0x571c[3] } } function shurikensInit() { var _0xd232x26 = []; var _0xd232x27 = false; for (var _0xd232x16 = 0; _0xd232x16 < shurikens[_0x571c[5]]; _0xd232x16++) { shurikens[_0xd232x16][_0x571c[22]](); for (var _0xd232x28 = 0; _0xd232x28 < enemies[_0x571c[5]]; _0xd232x28++) { let _0xd232x29 = (dist(shurikens[_0xd232x16][_0x571c[8]], shurikens[_0xd232x16][_0x571c[10]], enemies[_0xd232x28][_0x571c[8]] + scrollPos, enemies[_0xd232x28][_0x571c[10]]) <= 30) && !enemies[_0xd232x28][_0x571c[11]]; _0xd232x27 = _0xd232x27 || _0xd232x29; if (_0xd232x29) { enemies[_0xd232x28][_0x571c[23]] -= 10; if (enemies[_0xd232x28][_0x571c[23]] == 0) { enemies[_0xd232x28][_0x571c[11]] = true } } }; if (shurikens[_0xd232x16][_0x571c[24]]() && !_0xd232x27) { _0xd232x26[_0x571c[18]](shurikens[_0xd232x16]); shurikens[_0xd232x16][_0x571c[7]]() } }; shurikens = _0xd232x26 } function showMountains() { for (var _0xd232x16 = 0; _0xd232x16 < mountains[_0x571c[5]]; ++_0xd232x16) { mountains[_0xd232x16][_0x571c[7]](); mountains[_0xd232x16][_0x571c[8]] = mountains[_0xd232x16][_0x571c[9]] + scrollPos }; return _0xd232x16 } function showTrees() { for (var _0xd232x16 = 0; _0xd232x16 < trees[_0x571c[5]]; ++_0xd232x16) { trees[_0xd232x16][_0x571c[7]](); trees[_0xd232x16][_0x571c[8]] = trees[_0xd232x16][_0x571c[9]] + scrollPos } } function showClouds() { for (var _0xd232x16 = 0; _0xd232x16 < 25; ++_0xd232x16) { clouds[_0x571c[18]](new Cloud(random(-width, 2 * width), random(30, 200), random(0.5, 1))); clouds[_0xd232x16][_0x571c[7]](); clouds[_0xd232x16][_0x571c[25]](); if (clouds[_0xd232x16][_0x571c[8]] > width + 1000) { clouds[_0xd232x16][_0x571c[8]] = -width } } } function heart(_0xd232x2e, _0xd232x2f) { fill(200, 0, 0); noStroke(); triangle(_0xd232x2e, _0xd232x2f, _0xd232x2e + 50, _0xd232x2f, _0xd232x2e + 25, _0xd232x2f + 27); arc((_0xd232x2e + 14), _0xd232x2f, 27, 27, PI, 0); arc((_0xd232x2e + 36), _0xd232x2f, 27, 27, PI, 0) } function showStars() { for (var _0xd232x16 = 0; _0xd232x16 < 10; _0xd232x16++) { stars[_0xd232x16] = new Star() }; for (var _0xd232x16 = 0; _0xd232x16 < stars[_0x571c[5]]; _0xd232x16++) { stars[_0xd232x16][_0x571c[7]]() } } function scoreAndHpInit() { for (var _0xd232x16 = 0; _0xd232x16 < scoreDisplay[_0x571c[5]]; _0xd232x16++) { scoreDisplay[_0xd232x16][_0x571c[7]]() }; for (var _0xd232x16 = 0; _0xd232x16 < mc[_0x571c[2]]; _0xd232x16++) { heart(width - 250 + _0xd232x16 * 60, 50, 0.5) } } function startScreen() { background(0); fill(255); textSize(70); textAlign(CENTER); text(_0x571c[26], width / 2, height / 3); textSize(50); text(_0x571c[27], width / 2, 0.60 * height); text(_0x571c[28], width / 2, 0.75 * height); if (keyIsDown(32)) { state = _0x571c[1] } } function gameOverScreen() { background(0); fill(255); textSize(100); textAlign(CENTER); text(_0x571c[29], width / 2, height / 2); textSize(50); text(_0x571c[30], width / 2, 0.75 * height); if (keyIsDown(32)) { setupGameLvlOne() } } function levelCompleteScreen() { background(0); fill(255); textSize(100); textAlign(CENTER); text(_0x571c[31], width / 2, height / 2) } class Mc { constructor() { this[_0x571c[8]] = 200; this[_0x571c[10]] = floorPos_y; this[_0x571c[21]] = 1; this[_0x571c[32]] = 10; this[_0x571c[33]] = 0; this[_0x571c[19]] = false; this[_0x571c[34]] = false; this[_0x571c[35]] = false; this[_0x571c[36]] = false; this[_0x571c[37]] = [this[_0x571c[38]], this[_0x571c[39]], this[_0x571c[40]], this[_0x571c[41]]]; this[_0x571c[42]] = [this[_0x571c[43]], this[_0x571c[44]], this[_0x571c[45]], this[_0x571c[46]]]; this[_0x571c[47]] = undefined; this[_0x571c[48]] = undefined; this[_0x571c[2]] = 3; this[_0x571c[49]] = 0; this[_0x571c[50]] = 255 } show() { this[_0x571c[51]](); this[_0x571c[52]](); this[_0x571c[53]](); this[_0x571c[10]] += this[_0x571c[33]]; this[_0x571c[54]](); if (this[_0x571c[34]] && this[_0x571c[36]]) { fill(this[_0x571c[49]], 0, 0, this[_0x571c[50]]); stroke(this[_0x571c[49]], 0, 0, this[_0x571c[50]]); ellipse(this[_0x571c[8]] - 3, this[_0x571c[10]] - 55, 20, 20); line(this[_0x571c[8]] - 2, this[_0x571c[10]] - 55, this[_0x571c[8]], this[_0x571c[10]] - 25); beginShape(LINES); vertex(this[_0x571c[8]], this[_0x571c[10]] - 25); vertex(this[_0x571c[8]] + 8, this[_0x571c[10]] - 12); vertex(this[_0x571c[8]] + 8, this[_0x571c[10]] - 12); vertex(this[_0x571c[8]] + 23, this[_0x571c[10]]); endShape(); beginShape(LINES); vertex(this[_0x571c[8]], this[_0x571c[10]] - 25); vertex(this[_0x571c[8]] - 15, this[_0x571c[10]] - 20); vertex(this[_0x571c[8]] - 15, this[_0x571c[10]] - 20); vertex(this[_0x571c[8]] - 19, this[_0x571c[10]]); endShape(); line(this[_0x571c[8]], this[_0x571c[10]] - 46, this[_0x571c[8]] + 23, this[_0x571c[10]] - 40); this[_0x571c[55]](this[_0x571c[8]], this[_0x571c[10]] - 46) } else { if (this[_0x571c[35]] && this[_0x571c[36]]) { fill(this[_0x571c[49]], 0, 0, this[_0x571c[50]]); stroke(this[_0x571c[49]], 0, 0, this[_0x571c[50]]); ellipse(this[_0x571c[8]] + 3, this[_0x571c[10]] - 55, 20, 20); line(this[_0x571c[8]] + 2, this[_0x571c[10]] - 55, this[_0x571c[8]], this[_0x571c[10]] - 25); beginShape(LINES); vertex(this[_0x571c[8]], this[_0x571c[10]] - 25); vertex(this[_0x571c[8]] - 8, this[_0x571c[10]] - 12); vertex(this[_0x571c[8]] - 8, this[_0x571c[10]] - 12); vertex(this[_0x571c[8]] - 23, this[_0x571c[10]]); endShape(); beginShape(LINES); vertex(this[_0x571c[8]], this[_0x571c[10]] - 25); vertex(this[_0x571c[8]] + 15, this[_0x571c[10]] - 20); vertex(this[_0x571c[8]] + 15, this[_0x571c[10]] - 20); vertex(this[_0x571c[8]] + 19, this[_0x571c[10]]); endShape(); line(this[_0x571c[8]], this[_0x571c[10]] - 46, this[_0x571c[8]] - 23, this[_0x571c[10]] - 40); this[_0x571c[55]](this[_0x571c[8]], this[_0x571c[10]] - 46) } else { if (this[_0x571c[34]] && !this[_0x571c[19]]) { fill(this[_0x571c[49]], 0, 0, this[_0x571c[50]]); stroke(this[_0x571c[49]], 0, 0, this[_0x571c[50]]); const _0xd232x37 = this[_0x571c[42]][_0x571c[5]]; var _0xd232x38 = frameCount % _0xd232x37; this[_0x571c[42]][_0xd232x38](this[_0x571c[8]], this[_0x571c[10]]); this[_0x571c[55]](this[_0x571c[8]] - 2, this[_0x571c[10]] - 55) } else { if (this[_0x571c[35]] && !this[_0x571c[19]]) { fill(this[_0x571c[49]], 0, 0, this[_0x571c[50]]); stroke(this[_0x571c[49]], 0, 0, this[_0x571c[50]]); const _0xd232x39 = this[_0x571c[37]][_0x571c[5]]; var _0xd232x3a = frameCount % _0xd232x39; this[_0x571c[37]][_0xd232x3a](this[_0x571c[8]], this[_0x571c[10]]); this[_0x571c[55]](this[_0x571c[8]] + 2, this[_0x571c[10]] - 55) } else { if (this[_0x571c[36]] || this[_0x571c[19]]) { fill(this[_0x571c[49]], 0, 0, this[_0x571c[50]]); stroke(this[_0x571c[49]], 0, 0, this[_0x571c[50]]); ellipse(this[_0x571c[8]], this[_0x571c[10]] - 45, 20, 20); line(this[_0x571c[8]], this[_0x571c[10]] - 35, this[_0x571c[8]], this[_0x571c[10]] - 10); beginShape(LINES); vertex(this[_0x571c[8]], this[_0x571c[10]] - 10); vertex(this[_0x571c[8]] - 15, this[_0x571c[10]] - 25); vertex(this[_0x571c[8]] - 15, this[_0x571c[10]] - 25); vertex(this[_0x571c[8]] - 18, this[_0x571c[10]]); endShape(); beginShape(LINES); vertex(this[_0x571c[8]], this[_0x571c[10]] - 10); vertex(this[_0x571c[8]] + 15, this[_0x571c[10]] - 25); vertex(this[_0x571c[8]] + 15, this[_0x571c[10]] - 25); vertex(this[_0x571c[8]] + 18, this[_0x571c[10]]); endShape(); line(this[_0x571c[8]], this[_0x571c[10]] - 40, this[_0x571c[8]] - 23, this[_0x571c[10]] - 65); this[_0x571c[55]](this[_0x571c[8]], this[_0x571c[10]] - 40) } else { fill(this[_0x571c[49]], 0, 0, this[_0x571c[50]]); stroke(this[_0x571c[49]], 0, 0, this[_0x571c[50]]); ellipse(this[_0x571c[8]], this[_0x571c[10]] - 65, 20, 20); line(this[_0x571c[8]], this[_0x571c[10]] - 65, this[_0x571c[8]], this[_0x571c[10]] - 30); line(this[_0x571c[8]], this[_0x571c[10]] - 30, this[_0x571c[8]] + 5, this[_0x571c[10]]); line(this[_0x571c[8]], this[_0x571c[10]] - 30, this[_0x571c[8]] - 5, this[_0x571c[10]]); line(this[_0x571c[8]], this[_0x571c[10]] - 55, this[_0x571c[8]] - 5, this[_0x571c[10]] - 25); this[_0x571c[55]](this[_0x571c[8]], this[_0x571c[10]] - 55) } } } } } } movePlayer() { if (keyIsDown(87) && this[_0x571c[21]] == 1) { this[_0x571c[33]] = -10; this[_0x571c[21]]-- }; if (this[_0x571c[10]] < floorPos_y) { this[_0x571c[36]] = true } else { this[_0x571c[36]] = false }; if (keyIsDown(65) && !this[_0x571c[19]]) { this[_0x571c[34]] = true; if (this[_0x571c[8]] > width * 0.15) { this[_0x571c[8]] -= this[_0x571c[32]] } else { scrollPos = min(scrollPos += this[_0x571c[32]], 150) } } else { this[_0x571c[34]] = false }; if (keyIsDown(68) && !this[_0x571c[19]]) { this[_0x571c[35]] = true; if (this[_0x571c[8]] < width * 0.6) { this[_0x571c[8]] += this[_0x571c[32]] } else { scrollPos = max(scrollPos -= this[_0x571c[32]], -1000) } } else { this[_0x571c[35]] = false } } gravity() { if (this[_0x571c[10]] > floorPos_y && !this[_0x571c[19]]) { this[_0x571c[10]] = floorPos_y; this[_0x571c[33]] = 0 } else { if (this[_0x571c[10]] < floorPos_y) { this[_0x571c[33]] += 1 } } } jumpReset() { if (this[_0x571c[10]] == floorPos_y && !keyIsDown(87)) { this[_0x571c[21]] = 1 } } plumet() { this[_0x571c[10]] += 20; this[_0x571c[32]] = 0; this[_0x571c[21]] = 0 } respawn() { if (this[_0x571c[10]] > height + 300 && this[_0x571c[2]] > 0 && this[_0x571c[19]] == true) { this[_0x571c[2]]--; this[_0x571c[19]] = false; this[_0x571c[8]] = 200; scrollPos = 0; this[_0x571c[10]] = floorPos_y; this[_0x571c[32]] = 10 } } moveRightOne(_0xd232x2e, _0xd232x2f) { ellipse(_0xd232x2e + 3, _0xd232x2f - 65, 20, 20); line(_0xd232x2e + 3, _0xd232x2f - 65, _0xd232x2e, _0xd232x2f - 30); line(_0xd232x2e, _0xd232x2f - 30, _0xd232x2e + 4, _0xd232x2f); beginShape(LINES); vertex(_0xd232x2e, _0xd232x2f - 30); vertex(_0xd232x2e - 2, _0xd232x2f - 12); vertex(_0xd232x2e - 2, _0xd232x2f - 12); vertex(_0xd232x2e - 9, _0xd232x2f - 2); endShape(); line(_0xd232x2e + 2, _0xd232x2f - 55, _0xd232x2e - 5, _0xd232x2f - 25) } moveRightTwo(_0xd232x2e, _0xd232x2f) { ellipse(_0xd232x2e + 3, _0xd232x2f - 65, 20, 20); line(_0xd232x2e + 3, _0xd232x2f - 65, _0xd232x2e, _0xd232x2f - 30); line(_0xd232x2e, _0xd232x2f - 30, _0xd232x2e + 1, _0xd232x2f); beginShape(LINES); vertex(_0xd232x2e, _0xd232x2f - 30); vertex(_0xd232x2e + 1, _0xd232x2f - 14); vertex(_0xd232x2e + 1, _0xd232x2f - 14); vertex(_0xd232x2e - 6, _0xd232x2f - 4); endShape(); line(_0xd232x2e + 2, _0xd232x2f - 55, _0xd232x2e - 5, _0xd232x2f - 25) } moveRightThree(_0xd232x2e, _0xd232x2f) { ellipse(_0xd232x2e + 3, _0xd232x2f - 65, 20, 20); line(_0xd232x2e + 3, _0xd232x2f - 65, _0xd232x2e, _0xd232x2f - 30); beginShape(LINES); vertex(_0xd232x2e, _0xd232x2f - 30); vertex(_0xd232x2e, _0xd232x2f - 14); vertex(_0xd232x2e, _0xd232x2f - 14); vertex(_0xd232x2e - 3, _0xd232x2f); endShape(); beginShape(LINES); vertex(_0xd232x2e, _0xd232x2f - 30); vertex(_0xd232x2e + 3, _0xd232x2f - 16); vertex(_0xd232x2e + 3, _0xd232x2f - 16); vertex(_0xd232x2e + 4, _0xd232x2f - 2); endShape(); line(_0xd232x2e + 2, _0xd232x2f - 55, _0xd232x2e - 5, _0xd232x2f - 25) } moveRightFour(_0xd232x2e, _0xd232x2f) { ellipse(_0xd232x2e + 3, _0xd232x2f - 65, 20, 20); line(_0xd232x2e + 3, _0xd232x2f - 65, _0xd232x2e, _0xd232x2f - 30); beginShape(LINES); vertex(_0xd232x2e, _0xd232x2f - 30); vertex(_0xd232x2e + 7, _0xd232x2f - 15); vertex(_0xd232x2e + 7, _0xd232x2f - 15); vertex(_0xd232x2e + 10, _0xd232x2f); endShape(); beginShape(LINES); vertex(_0xd232x2e, _0xd232x2f - 30); vertex(_0xd232x2e - 2, _0xd232x2f - 12); vertex(_0xd232x2e - 2, _0xd232x2f - 12); vertex(_0xd232x2e - 8, _0xd232x2f); endShape(); line(_0xd232x2e + 2, _0xd232x2f - 55, _0xd232x2e - 5, _0xd232x2f - 25) } moveLeftOne(_0xd232x2e, _0xd232x2f) { ellipse(_0xd232x2e - 3, _0xd232x2f - 65, 20, 20); line(_0xd232x2e - 3, _0xd232x2f - 65, _0xd232x2e, _0xd232x2f - 30); beginShape(LINES); vertex(_0xd232x2e, _0xd232x2f - 30); vertex(_0xd232x2e - 7, _0xd232x2f - 15); vertex(_0xd232x2e - 7, _0xd232x2f - 15); vertex(_0xd232x2e - 10, _0xd232x2f); endShape(); beginShape(LINES); vertex(_0xd232x2e, _0xd232x2f - 30); vertex(_0xd232x2e + 2, _0xd232x2f - 12); vertex(_0xd232x2e + 2, _0xd232x2f - 12); vertex(_0xd232x2e + 8, _0xd232x2f); endShape(); line(_0xd232x2e - 2, _0xd232x2f - 55, _0xd232x2e + 5, _0xd232x2f - 25) } moveLeftTwo(_0xd232x2e, _0xd232x2f) { ellipse(_0xd232x2e - 3, _0xd232x2f - 65, 20, 20); line(_0xd232x2e - 3, _0xd232x2f - 65, _0xd232x2e, _0xd232x2f - 30); line(_0xd232x2e, _0xd232x2f - 30, _0xd232x2e - 4, _0xd232x2f); beginShape(LINES); vertex(_0xd232x2e, _0xd232x2f - 30); vertex(_0xd232x2e + 2, _0xd232x2f - 12); vertex(_0xd232x2e + 2, _0xd232x2f - 12); vertex(_0xd232x2e + 9, _0xd232x2f - 2); endShape(); line(_0xd232x2e - 2, _0xd232x2f - 55, _0xd232x2e + 5, _0xd232x2f - 25) } moveLeftThree(_0xd232x2e, _0xd232x2f) { ellipse(_0xd232x2e - 3, _0xd232x2f - 65, 20, 20); line(_0xd232x2e - 3, _0xd232x2f - 65, _0xd232x2e, _0xd232x2f - 30); line(_0xd232x2e, _0xd232x2f - 30, _0xd232x2e - 1, _0xd232x2f); beginShape(LINES); vertex(_0xd232x2e, _0xd232x2f - 30); vertex(_0xd232x2e - 1, _0xd232x2f - 14); vertex(_0xd232x2e - 1, _0xd232x2f - 14); vertex(_0xd232x2e + 6, _0xd232x2f - 4); endShape(); line(_0xd232x2e - 2, _0xd232x2f - 55, _0xd232x2e + 5, _0xd232x2f - 25) } moveLeftFour(_0xd232x2e, _0xd232x2f) { ellipse(_0xd232x2e - 3, _0xd232x2f - 65, 20, 20); line(_0xd232x2e - 3, _0xd232x2f - 65, _0xd232x2e, _0xd232x2f - 30); beginShape(LINES); vertex(_0xd232x2e, _0xd232x2f - 30); vertex(_0xd232x2e, _0xd232x2f - 14); vertex(_0xd232x2e, _0xd232x2f - 14); vertex(_0xd232x2e + 3, _0xd232x2f); endShape(); beginShape(LINES); vertex(_0xd232x2e, _0xd232x2f - 30); vertex(_0xd232x2e - 3, _0xd232x2f - 16); vertex(_0xd232x2e - 3, _0xd232x2f - 16); vertex(_0xd232x2e - 4, _0xd232x2f - 2); endShape(); line(_0xd232x2e - 2, _0xd232x2f - 55, _0xd232x2e + 5, _0xd232x2f - 25) } gunArm(_0xd232x49, _0xd232x4a) { var _0xd232x4b = createVector(_0xd232x49, _0xd232x4a); var _0xd232x4c = createVector(mouseX, mouseY); var _0xd232x4d = _0xd232x4c[_0x571c[59]](_0xd232x4b)[_0x571c[58]]()[_0x571c[57]](31)[_0x571c[56]](_0xd232x4b); line(_0xd232x4b[_0x571c[8]], _0xd232x4b[_0x571c[10]], _0xd232x4d[_0x571c[8]], _0xd232x4d[_0x571c[10]]); this[_0x571c[47]] = _0xd232x4d[_0x571c[8]]; this[_0x571c[48]] = _0xd232x4d[_0x571c[10]] } }; class Tree { constructor(_0xd232x49) { this[_0x571c[8]] = _0xd232x49; this[_0x571c[10]] = groundPos_Y - 72; this[_0x571c[9]] = this[_0x571c[8]] } show() { noStroke(); fill(179, 156, 77); rect(this[_0x571c[8]], this[_0x571c[10]], 10, 72); fill(96, 119, 68); ellipse(this[_0x571c[8]] + 5, this[_0x571c[10]] - 25, 50); fill(118, 137, 72, 250); ellipse(this[_0x571c[8]] - 10, this[_0x571c[10]], 50); fill(52, 98, 63, 250); ellipse(this[_0x571c[8]] + 20, this[_0x571c[10]] - 5, 50) } }; class Cloud { constructor(_0xd232x49, _0xd232x4a, _0xd232x4e) { this[_0x571c[8]] = _0xd232x49; this[_0x571c[10]] = _0xd232x4a; this[_0x571c[9]] = this[_0x571c[8]]; this[_0x571c[60]] = _0xd232x4e } show() { noStroke(); fill(241, 250, 238); ellipse(this[_0x571c[8]] * this[_0x571c[60]], this[_0x571c[10]] * this[_0x571c[60]], 70 * this[_0x571c[60]], 60 * this[_0x571c[60]]); ellipse((this[_0x571c[8]] - 30) * this[_0x571c[60]], (this[_0x571c[10]] + 5) * this[_0x571c[60]], 50 * this[_0x571c[60]], 40 * this[_0x571c[60]]); ellipse((this[_0x571c[8]] + 30) * this[_0x571c[60]], (this[_0x571c[10]] + 5) * this[_0x571c[60]], 50 * this[_0x571c[60]], 40 * this[_0x571c[60]]); ellipse((this[_0x571c[8]] - 55) * this[_0x571c[60]], (this[_0x571c[10]] + 10) * this[_0x571c[60]], 30 * this[_0x571c[60]], 20 * this[_0x571c[60]]); ellipse((this[_0x571c[8]] + 55) * this[_0x571c[60]], (this[_0x571c[10]] + 10) * this[_0x571c[60]], 30 * this[_0x571c[60]], 20 * this[_0x571c[60]]) } move() { this[_0x571c[8]] += random(0, 1) } }; class Collectible { constructor(_0xd232x49, _0xd232x4a, _0xd232x4e) { this[_0x571c[8]] = _0xd232x49; this[_0x571c[10]] = _0xd232x4a; this[_0x571c[9]] = this[_0x571c[8]]; this[_0x571c[60]] = _0xd232x4e; this[_0x571c[16]] = false; this[_0x571c[50]] = 255 } show() { if (!this[_0x571c[16]]) { fill(252, 163, 17, this[_0x571c[50]]); beginShape(); vertex(this[_0x571c[8]] * this[_0x571c[60]], this[_0x571c[10]] * this[_0x571c[60]]); vertex((this[_0x571c[8]] + 10) * this[_0x571c[60]], (this[_0x571c[10]] + 25) * this[_0x571c[60]]); vertex((this[_0x571c[8]] + 20) * this[_0x571c[60]], this[_0x571c[10]] * this[_0x571c[60]]); vertex((this[_0x571c[8]] + 45) * this[_0x571c[60]], (this[_0x571c[10]] - 10) * this[_0x571c[60]]); vertex((this[_0x571c[8]] + 20) * this[_0x571c[60]], (this[_0x571c[10]] - 18) * this[_0x571c[60]]); vertex((this[_0x571c[8]] + 10) * this[_0x571c[60]], (this[_0x571c[10]] - 45) * this[_0x571c[60]]); vertex(this[_0x571c[8]] * this[_0x571c[60]], (this[_0x571c[10]] - 18) * this[_0x571c[60]]); vertex((this[_0x571c[8]] - 25) * this[_0x571c[60]], (this[_0x571c[10]] - 10) * this[_0x571c[60]]); endShape() } else { if (this[_0x571c[16]]) { fill(252, 163, 17, this[_0x571c[50]]); ellipse(this[_0x571c[8]], this[_0x571c[10]], this[_0x571c[60]], this[_0x571c[60]]); this[_0x571c[60]] = min(this[_0x571c[60]] += 50, 500); this[_0x571c[50]] = max(this[_0x571c[50]] -= 20, 0) } } } reset() { if (this[_0x571c[60]] > 1000) { this[_0x571c[16]] = false } } }; class Mountain { constructor(_0xd232x49) { this[_0x571c[8]] = _0xd232x49; this[_0x571c[10]] = groundPos_Y; this[_0x571c[9]] = _0xd232x49 } show() { fill(92, 77, 60); triangle(this[_0x571c[8]] + 100, this[_0x571c[10]] - 172, this[_0x571c[8]] - 100, this[_0x571c[10]], this[_0x571c[8]] + 300, this[_0x571c[10]]); triangle(this[_0x571c[8]] + 160, this[_0x571c[10]] - 152, this[_0x571c[8]] - 100, this[_0x571c[10]], this[_0x571c[8]] + 300, this[_0x571c[10]]); triangle(this[_0x571c[8]] - 170, this[_0x571c[10]] - 152, this[_0x571c[8]] - 550, this[_0x571c[10]], this[_0x571c[8]] + 100, this[_0x571c[10]]); fill(129, 88, 57); triangle(this[_0x571c[8]] + 300, this[_0x571c[10]] - 112, this[_0x571c[8]] - 50, this[_0x571c[10]], this[_0x571c[8]] + 500, this[_0x571c[10]]); triangle(this[_0x571c[8]] + 250, this[_0x571c[10]] - 112, this[_0x571c[8]] - 50, this[_0x571c[10]], this[_0x571c[8]] + 500, this[_0x571c[10]]); triangle(this[_0x571c[8]], this[_0x571c[10]] - 172, this[_0x571c[8]] - 250, this[_0x571c[10]], this[_0x571c[8]] + 300, this[_0x571c[10]]); triangle(this[_0x571c[8]] - 250, this[_0x571c[10]] - 150, this[_0x571c[8]] - 600, this[_0x571c[10]], this[_0x571c[8]], this[_0x571c[10]]) } }; class Canyon { constructor(_0xd232x49, _0xd232x51) { this[_0x571c[8]] = _0xd232x49; this[_0x571c[10]] = groundPos_Y; this[_0x571c[12]] = _0xd232x51; this[_0x571c[9]] = this[_0x571c[8]] } show() { fill(3, 4, 94); rect(this[_0x571c[8]], this[_0x571c[10]], this[_0x571c[12]], height); fill(20, 54, 66); rect(this[_0x571c[8]], this[_0x571c[10]], this[_0x571c[12]], 90) } }; class Flag { constructor(_0xd232x49, _0xd232x4a) { this[_0x571c[8]] = _0xd232x49; this[_0x571c[14]] = groundPos_Y - _0xd232x4a - 200; this[_0x571c[15]] = groundPos_Y - _0xd232x4a; this[_0x571c[13]] = groundPos_Y - _0xd232x4a - 60; this[_0x571c[9]] = this[_0x571c[8]]; this[_0x571c[16]] = false } show() { stroke(231, 236, 239); line(this[_0x571c[8]], this[_0x571c[14]], this[_0x571c[8]], this[_0x571c[15]]); noStroke(); fill(154, 3, 30); rect(this[_0x571c[8]], this[_0x571c[13]], 60, 50); if (this[_0x571c[16]]) { this[_0x571c[13]] = max(this[_0x571c[13]] -= 7, this[_0x571c[14]]) } } }; class Ground { constructor(_0xd232x49, _0xd232x51) { this[_0x571c[8]] = _0xd232x49; this[_0x571c[10]] = 432; this[_0x571c[12]] = _0xd232x51 } show() { noStroke(); fill(0, 114, 0); rect(this[_0x571c[8]], this[_0x571c[10]], this[_0x571c[12]], height) } }; class Star { constructor() { this[_0x571c[8]] = random(0, width); this[_0x571c[10]] = random(0, height); this[_0x571c[60]] = random(0.25, 3); this[_0x571c[61]] = random(TAU) } show() { this[_0x571c[61]] += 0.1; var _0xd232x52 = this[_0x571c[60]] + sin(this[_0x571c[61]]) * 2; noStroke(); fill(255); rect(this[_0x571c[8]], this[_0x571c[10]], _0xd232x52, _0xd232x52) } }; class Score { constructor() { this[_0x571c[17]] = 0 } show() { fill(255, 149, 0); text(this[_0x571c[17]], 25, 25, 300, 300) } }; class Shuriken { constructor(_0xd232x49, _0xd232x4a, _0xd232x53, _0xd232x54) { this[_0x571c[62]] = 50; this[_0x571c[8]] = _0xd232x53; this[_0x571c[9]] = this[_0x571c[8]]; this[_0x571c[10]] = _0xd232x54; this[_0x571c[63]] = createVector(_0xd232x49 - _0xd232x53, _0xd232x4a - _0xd232x54)[_0x571c[58]](); this[_0x571c[64]] = 5; this[_0x571c[65]] = Math[_0x571c[66]]() < 0.5 } show() { if (this[_0x571c[65]]) { fill(0); noStroke; beginShape(); vertex(this[_0x571c[8]], this[_0x571c[10]] - 10); vertex((this[_0x571c[8]] + 2.2), (this[_0x571c[10]] - 2.2)); vertex((this[_0x571c[8]] + 10), this[_0x571c[10]]); vertex((this[_0x571c[8]] + 2.2), (this[_0x571c[10]] + 2.2)); vertex((this[_0x571c[8]]), (this[_0x571c[10]] + 10)); vertex((this[_0x571c[8]] - 2.2), (this[_0x571c[10]] + 2.2)); vertex(this[_0x571c[8]] - 10, this[_0x571c[10]]); vertex((this[_0x571c[8]] - 2.2), (this[_0x571c[10]] - 2.2)); endShape() } else { fill(0); noStroke; beginShape(); vertex(this[_0x571c[8]] - 8, this[_0x571c[10]] - 8); vertex(this[_0x571c[8]], this[_0x571c[10]] - 3); vertex(this[_0x571c[8]] + 8, this[_0x571c[10]] - 8); vertex(this[_0x571c[8]] + 3, this[_0x571c[10]]); vertex(this[_0x571c[8]] + 8, this[_0x571c[10]] + 8); vertex(this[_0x571c[8]], this[_0x571c[10]] + 3); vertex(this[_0x571c[8]] - 8, this[_0x571c[10]] + 8); vertex(this[_0x571c[8]] - 3, this[_0x571c[10]]); endShape() } } toMouse() { this[_0x571c[8]] += this[_0x571c[63]][_0x571c[8]] * this[_0x571c[62]]; this[_0x571c[10]] += this[_0x571c[63]][_0x571c[10]] * this[_0x571c[62]] } onScreen() { return this[_0x571c[8]] > -this[_0x571c[64]] && this[_0x571c[8]] < width + this[_0x571c[64]] && this[_0x571c[10]] > -this[_0x571c[64]] && this[_0x571c[10]] < height + this[_0x571c[64]] } }; class Enemy { constructor(_0xd232x49) { this[_0x571c[8]] = _0xd232x49; this[_0x571c[10]] = groundPos_Y - 50; this[_0x571c[9]] = this[_0x571c[8]]; this[_0x571c[67]] = this[_0x571c[8]]; this[_0x571c[68]] = 0; this[_0x571c[69]] = -1; this[_0x571c[60]] = 30; this[_0x571c[49]] = color(204, 0, 204, 50); this[_0x571c[70]] = []; this[_0x571c[71]] = 0; this[_0x571c[72]] = 0; this[_0x571c[11]] = false; this[_0x571c[23]] = 50; this[_0x571c[73]] = 400; this[_0x571c[32]] = this[_0x571c[74]](); this[_0x571c[75]] = 255 } show() { if (!this[_0x571c[11]]) { this[_0x571c[9]] += this[_0x571c[32]]; this[_0x571c[76]](); this[_0x571c[77]](); this[_0x571c[78]]() } else { if (this[_0x571c[11]]) { fill(204, 0, 204, this[_0x571c[75]]); ellipse(this[_0x571c[8]], this[_0x571c[10]], this[_0x571c[60]], this[_0x571c[60]]); this[_0x571c[60]] = min(this[_0x571c[60]] += 50, 500); this[_0x571c[75]] = max(this[_0x571c[75]] -= 20, 0) } } } healthBar() { let _0xd232x58 = map(this[_0x571c[23]], 0, 50, 5, 100); fill(250, 0, 0); rect(this[_0x571c[8]] - 50, this[_0x571c[10]] - 60, _0xd232x58, 10) } startEmitter(_0xd232x5a, _0xd232x5b) { this[_0x571c[71]] = _0xd232x5a; this[_0x571c[72]] = _0xd232x5b; for (var _0xd232x16 = 0; _0xd232x16 < this[_0x571c[71]]; _0xd232x16++) { this[_0x571c[70]][_0x571c[18]](this[_0x571c[79]]()) } } createNewParticles() { var _0xd232x5d = random(this[_0x571c[8]] - 10, this[_0x571c[8]] + 10); var _0xd232x5e = random(this[_0x571c[10]] - 10, this[_0x571c[10]] + 10); var _0xd232x5f = random(this[_0x571c[68]] - 1, this[_0x571c[68]] + 1); var _0xd232x60 = random(this[_0x571c[69]] - 1, this[_0x571c[69]] + 1); var _0xd232x61 = new Particle(_0xd232x5d, _0xd232x5e, _0xd232x5f, _0xd232x60, this[_0x571c[60]], this[_0x571c[49]]); return (_0xd232x61) } drawAndUpdateParticles() { var _0xd232x63 = 0; for (var _0xd232x16 = this[_0x571c[70]][_0x571c[5]] - 1; _0xd232x16 > 0; _0xd232x16--) { this[_0x571c[70]][_0xd232x16][_0x571c[7]](); this[_0x571c[70]][_0xd232x16][_0x571c[80]](); if (this[_0x571c[70]][_0xd232x16][_0x571c[81]] > random(0, this[_0x571c[72]])) { this[_0x571c[70]][_0x571c[82]](_0xd232x16, 1); _0xd232x63++ } }; if (_0xd232x63 > 0) { for (var _0xd232x16 = 0; _0xd232x16 < _0xd232x63; _0xd232x16++) { var _0xd232x61 = this[_0x571c[79]](); this[_0x571c[70]][_0x571c[18]](_0xd232x61) } } } moveRange() { if (this[_0x571c[9]] >= this[_0x571c[67]] + this[_0x571c[73]]) { this[_0x571c[32]] = -(this[_0x571c[32]]) } else { if (this[_0x571c[9]] <= this[_0x571c[67]] - this[_0x571c[73]]) { this[_0x571c[32]] = -(this[_0x571c[32]]) } } } getRandomDir() { var _0xd232x66 = Math[_0x571c[66]]() < 0.5; if (_0xd232x66) { return (-5) } else { return (5) } } }; class Particle { constructor(_0xd232x5d, _0xd232x5e, _0xd232x5f, _0xd232x60, _0xd232x4e, _0xd232x67) { this[_0x571c[8]] = _0xd232x5d; this[_0x571c[10]] = _0xd232x5e; this[_0x571c[68]] = _0xd232x5f; this[_0x571c[69]] = _0xd232x60; this[_0x571c[60]] = _0xd232x4e; this[_0x571c[49]] = _0xd232x67; this[_0x571c[81]] = 0 } show() { noStroke(); fill(this[_0x571c[49]]); ellipse(this[_0x571c[8]], this[_0x571c[10]], this[_0x571c[60]]) } updateParticle() { this[_0x571c[8]] += this[_0x571c[68]]; this[_0x571c[10]] += this[_0x571c[69]]; this[_0x571c[81]]++ } }; class Platform { constructor(_0xd232x49, _0xd232x69, _0xd232x51) { this[_0x571c[8]] = _0xd232x49; this[_0x571c[9]] = this[_0x571c[8]]; this[_0x571c[10]] = groundPos_Y - _0xd232x69; this[_0x571c[12]] = _0xd232x51 } show() { fill(0, 114, 0); rect(this[_0x571c[8]], this[_0x571c[10]], this[_0x571c[12]], 10) } }; function mousePressed() { if (dist(mouseX, mouseY, mc[_0x571c[8]], mc[_0x571c[10]] - 55) > 32 && state == _0x571c[1]) { shurikens[_0x571c[18]](new Shuriken(mouseX, mouseY, mc[_0x571c[47]], mc[_0x571c[48]])) } }